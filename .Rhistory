cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(Dates)
str(pm1$Dates)
str(dates)
dates <- as.Date(as.charachter(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], 'month')
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date, '%Y%m%d'))
dates0 <- as.Date(as.character(pm0sub$Date), '%Y%m%d')
dates1 <- as.Date(as.character(pm1sub$Date), '%Y%m%d')
par(nfrom=c(1,2), mar=c(4,4,2,1))
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(x0sub, np.rm=TRUE), lwd=2)
abline(h=median(x0sub, na.rm=TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm=TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by='state')
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 51), mrg[,2], xlim=c(.5, 2.5)))
with(mrg, plot(rep(1, 52), mrg[,2], xlim=c(.5, 2.5)))
with(mrg, plot(rep(1, 52), mrg[,3]))
with(mrg, plot(rep(2, 52), mrg[,3]))
with(mrg, points(rep(2, 52), mrg[,3]))
dev.off()
with(mrg, plot(rep(1, 52), mrg[,3]))
dev.off()
with(mrg, plot(rep(1, 52), mrg[,2], xlim=c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[,3]))
segments(rep(1, 52), mrg[,2],rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat = sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:34"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$dist, y=cars$speed, xlab='Speed')
plot(x=cars$speed, y=cars$dist, xlab='Speed')
plot(x=cars$speed, y=cars$dist, xlab='Speed', ylab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, ylab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, xlab = 'Speedylab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, xlab = 'Speed', lab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, xlab = 'Speed', ylab='Stopping Distance')
plot(cars, main='My Plot')
plot(cars, title='My Plot')
plot(cars, sub='My Plot')
plot(cars, sub='My Plot Subtitle')
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(cars$mpg)
hist(mtcars$mpg)
install_from_swirl('Getting and Cleaning Data')
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <- tbl_df(mydf)
rm('mydf')
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=='swirl')
filter(cran, r_version=='3.1.1', country == 'US')
?Comparison
filter(cran, r_version=='3.0.2', country == 'IN')
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country=='US' | country=='IN')
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, data=res, col=sex_class, into=c("sex", "class"))
separate(res, data=res, col=sex_class, into=c("sex", "class"), sep=2)
separate(res, sex_class, into=c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number('class5')
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(status = 'passed')
mutate(passed, status = 'passed')
passed <- passed %>% mutate(status='passed')
failed <- failed %>% mutate(status='failed')
bind_rows(passed, failed)
sat
submit()
submit()
submit()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package=lubridate)
this_day <- today()
this_dat
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd('1989-05-17')
my_date <- ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 May 17')
mdy('March 12, 1975')
dmy(25081985)
ymd('192012')
ymd('1920-1-2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes=34, seconds = 55)
this_moment
this_moment <- update(now())
this_moment <- update(this_moment, hours=10, minutes=16, seconds=0)
this_moment
nyc <- now('America/New_York')
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone='Asia/Hong_Kong')
arrive
last_time <- mdy("June 17, 2008", tz = 'Singapore')
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
#check missing data
install.packages('Amelia')
source('C:/Users/mfrey/Desktop/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Training Exercises/Machine Learning Projects/CSV files for ML Projects/knn project.R')
library(dplyr)
select(iris, Species)
label <- select(iris, Species)
jn_iris <- inner_join(st_iris, species)
jn_iris <- inner_join(st_iris, label)
dim(st_iris)
dim(label)
jn_iris <- cbind(st_iris, label)
jn_iris
library(caTools)
library(caTools)
set.seed(101)
split <- samplt.split(jn_iris$Species, SplitRation=0.70)
train <- subset(jn_iris, split==TRUE)
test <- subset(jn_iris, split==FALSE)
library(caTools)
set.seed(101)
split <- sample.split(jn_iris$Species, SplitRation=0.70)
train <- subset(jn_iris, split==TRUE)
test <- subset(jn_iris, split==FALSE)
library(caTools)
set.seed(101)
split <- sample.split(jn_iris$Species, SplitRatio=0.70)
train <- subset(jn_iris, split==TRUE)
test <- subset(jn_iris, split==FALSE)
library(class)
pred.species <- knn(train[1:4], test[1:4], train$Species, k=1)
pred.species
missclass.error <- mean(test$Species != pred.species)
missclass.error
pr.species <- NULL
error.rate <- NULL
for (i in 1:10){
set.seed(101)
pr.species <- knn(train[1:4], test[1:4],train$Species, k=i)
error.rate[i] <- mean(test$Species != pr.species)
}
print(error.rate)
library(ggplot2)
g <- ggplot(error.df, aes(k.values, error.rate)) +
geom_point()+geom_line(lty='dotted', color='red')
print(g)
library(ggplot2)
k.values <-1:10
error.df <- data.frame(error.rate, k.values)
g <- ggplot(error.df, aes(k.values, error.rate)) +
geom_point()+geom_line(lty='dotted', color='red')
print(g)
source('C:/Users/mfrey/Desktop/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Training Exercises/Machine Learning Projects/CSV files for ML Projects/random forest project.R')
predictions[, predictions$Yes]
class(predictions)
select(predictions, Yes)
library(dplyr)
select(predictions, Yes)
predictions$Yes
predictions
predictions[2]
predictions[,2]
source('C:/Users/mfrey/Desktop/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Training Exercises/Machine Learning Projects/CSV files for ML Projects/random forest project.R')
predictions
head(predictions)
library(ISLR)
head(College)
df <- College
head(df)
library(ggplot2)
g <- ggplot(df, aes(Room.Board, Grad.Rate))+
geom_point(aes(color=Private))+theme_bw()
print(g)
g <- ggplot(df, aes(Room.Board, Grad.Rate))+
geom_point(aes(color=Private), size=4, alph=0.37)+theme_bw()
print(g)
g <- ggplot(df, aes(Room.Board, Grad.Rate))+
geom_point(aes(color=Private), size=4, alpha=0.37)+theme_bw()
print(g)
h <- ggplot(df, aes(F.Undergrad)) +
geom_histogram(aes(fill=Private), color='black', bins=37)+
theme_bw()
print(h)
h <- ggplot(df, aes(F.Undergrad)) +
geom_histogram(aes(fill=Private), color='black', bins=37, alpha=0.37)+
theme_bw()
print(h)
h <- ggplot(df, aes(F.Undergrad)) +
geom_histogram(aes(fill=Private), color='black', bins=50, alpha=0.37)+
theme_bw()
print(h)
h2 <- ggplot(df, aes(Grad.Rate))+
geom_histogram(aes(fill=Private), color='black', bins=37)+
theme_bw()
print(h2)
h2 <- ggplot(df, aes(Grad.Rate))+
geom_histogram(aes(fill=Private), color='black', bins=50,alpha=0.37)+
theme_bw()
print(h2)
print(df[df$Grad.Rate > 100,])
df$Grad.Rate[df$Grad.Rate > 100] <- 100
print(df[df$Grad.Rate > 100,])
library(caTools)
set.seed(101)
split <- sample.split(df$Private, SplitRatio = 0.70)
train <- subset(df, split==T)
test <- subset(df, split==F)
library(rpart)
tree <- rpart(Private ~ ., method='class', data=train)
predictions <- predict(tree, test)
head(predictions)
predictions <- as.data.frame(predictions)
predictions$Private <- ifelse(predictions$Yes >= 0.5,'Yes','No')
head(predictions)
table(test$Private,predictions$Private)
table(predictions$Private, test$Private)
library(rpart.plot)
prp(tree)
library(randomForest)
rf.model <- randomForest(Private ~ ., data=train, importance=T)
rf.model$confusion
rf.model$importance
pred <- predict(rf.model, test)
table(pred, test$Private)
getwd()
setws("C:/Users/mfrey/")
setwd("C:/Users/mfrey/")
setwd("C:/Users/mfrey/RepData_PeerAssessment1/")
int_avg
list.files()
source('C:/Users/mfrey/Desktop/Reproducible Research/activity.R')
int_avg()
exit
alsdk
int_avg
int_a
activity$interval
activity$step[activity$interval==0]
dim(activity)
length(int_a)
mean(activity$step[activity$interval==0], na.rm=T)
int_a
mean(activity$step[activity$interval==5], na.rm=T)
activity$steps
stepa
steps
sum(activity$steps)
sum(activity$steps, na.rm=T)
sum(steps)
list.files()
